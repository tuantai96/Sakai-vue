{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-d8a22336\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"grid\"\n};\nconst _hoisted_2 = {\n  class: \"col-12\"\n};\nconst _hoisted_3 = {\n  class: \"card\"\n};\nconst _hoisted_4 = {\n  class: \"my-2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Toast = _resolveComponent(\"Toast\");\n\n  const _component_Button = _resolveComponent(\"Button\");\n\n  const _component_FileUpload = _resolveComponent(\"FileUpload\");\n\n  const _component_Toolbar = _resolveComponent(\"Toolbar\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_Toast), _createVNode(_component_Toolbar, {\n    class: \"mb-4\"\n  }, {\n    start: _withCtx(() => [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_Button, {\n      label: \"New\",\n      icon: \"pi pi-plus\",\n      class: \"p-button-success mr-2\",\n      onClick: $options.openNew\n    }, null, 8\n    /* PROPS */\n    , [\"onClick\"]), _createVNode(_component_Button, {\n      label: \"Delete\",\n      icon: \"pi pi-trash\",\n      class: \"p-button-danger\",\n      onClick: $options.confirmDeleteSelected,\n      disabled: !$data.selectedProducts || !$data.selectedProducts.length\n    }, null, 8\n    /* PROPS */\n    , [\"onClick\", \"disabled\"])])]),\n    end: _withCtx(() => [_createVNode(_component_FileUpload, {\n      mode: \"basic\",\n      accept: \"image/*\",\n      maxFileSize: 1000000,\n      label: \"Import\",\n      chooseLabel: \"Import\",\n      class: \"mr-2 inline-block\"\n    }), _createVNode(_component_Button, {\n      label: \"Export\",\n      icon: \"pi pi-upload\",\n      class: \"p-button-help\",\n      onClick: _cache[0] || (_cache[0] = $event => $options.exportCSV($event))\n    })]),\n    _: 1\n    /* STABLE */\n\n  })])])]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EAIAA,KAAK,EAAC;;;;;;;;;;;uBANrBC,oBA0BM,KA1BN,cA0BM,CAzBJC,oBAwBM,KAxBN,cAwBM,CAvBJA,oBAsBM,KAtBN,cAsBM,CArBJC,aAAQC,gBAAR,CAqBI,EApBJD,aAYUE,kBAZV,EAYU;IAZDL,KAAK,EAAC;EAYL,CAZV,EAAqB;IACFM,KAAK,WACpB,MAGM,CAHNJ,oBAGM,KAHN,cAGM,CAFJC,aAAuFI,iBAAvF,EAAuF;MAA/EC,KAAK,EAAC,KAAyE;MAAnEC,IAAI,EAAC,YAA8D;MAAjDT,KAAK,EAAC,uBAA2C;MAAlBU,OAAK,EAAEC;IAAW,CAAvF;;IAAA,cAEI,EADJR,aAA6JI,iBAA7J,EAA6J;MAArJC,KAAK,EAAC,QAA+I;MAAtIC,IAAI,EAAC,aAAiI;MAAnHT,KAAK,EAAC,iBAA6G;MAA1FU,OAAK,EAAEC,8BAAmF;MAA3DC,QAAQ,GAAGC,sBAAH,IAAmB,CAAKA,uBAAiBC;IAAU,CAA7J;;IAAA,0BACI,CAHN,CAGM,CAJc,CADH;IAQFC,GAAG,WAClB,MAAiI,CAAjIZ,aAAiIa,qBAAjI,EAAiI;MAArHC,IAAI,EAAC,OAAgH;MAAxGC,MAAM,EAAC,SAAiG;MAAtFC,WAAW,EAAE,OAAyE;MAAhEX,KAAK,EAAC,QAA0D;MAAjDY,WAAW,EAAC,QAAqC;MAA5BpB,KAAK,EAAC;IAAsB,CAAjI,CAAiI,EACjIG,aAA+FI,iBAA/F,EAA+F;MAAvFC,KAAK,EAAC,QAAiF;MAAxEC,IAAI,EAAC,cAAmE;MAApDT,KAAK,EAAC,eAA8C;MAA7BU,OAAK,sCAAEC,mBAAUU,MAAV,CAAF;IAAwB,CAA/F,CADiI,CAD/G,CARD;;;;EAAA,CAArB,CAoBI,CAtBN,CAuBI,CAxBN,CAyBI,CA1BN","names":["class","_createElementBlock","_createElementVNode","_createVNode","_component_Toast","_component_Toolbar","start","_component_Button","label","icon","onClick","$options","disabled","$data","length","end","_component_FileUpload","mode","accept","maxFileSize","chooseLabel","$event"],"sourceRoot":"","sources":["D:\\0. TaiPT\\2.Vue JS\\sakai-vue\\src\\pages\\CrudDemo.vue"],"sourcesContent":["<template>\r\n  <div class=\"grid\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card\">\r\n        <Toast/>\r\n        <Toolbar class=\"mb-4\">\r\n          <template v-slot:start>\r\n            <div class=\"my-2\">\r\n              <Button label=\"New\" icon=\"pi pi-plus\" class=\"p-button-success mr-2\" @click=\"openNew\" />\r\n              <Button label=\"Delete\" icon=\"pi pi-trash\" class=\"p-button-danger\" @click=\"confirmDeleteSelected\" :disabled=\"!selectedProducts || !selectedProducts.length\" />\r\n            </div>\r\n          </template>\r\n\r\n          <template v-slot:end>\r\n            <FileUpload mode=\"basic\" accept=\"image/*\" :maxFileSize=\"1000000\" label=\"Import\" chooseLabel=\"Import\" class=\"mr-2 inline-block\" />\r\n            <Button label=\"Export\" icon=\"pi pi-upload\" class=\"p-button-help\" @click=\"exportCSV($event)\"  />\r\n          </template>\r\n        </Toolbar>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport {FilterMatchMode} from 'primevue/api';\r\nimport ProductService from '../service/ProductService';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: null,\r\n      productDialog: false,\r\n      deleteProductDialog: false,\r\n      deleteProductsDialog: false,\r\n      product: {},\r\n      selectedProducts: null,\r\n      filters: {},\r\n      submitted: false,\r\n      statuses: [\r\n        {label: 'INSTOCK', value: 'instock'},\r\n        {label: 'LOWSTOCK', value: 'lowstock'},\r\n        {label: 'OUTOFSTOCK', value: 'outofstock'}\r\n      ]\r\n    }\r\n  },\r\n  productService: null,\r\n  created() {\r\n    this.productService = new ProductService();\r\n    this.initFilters();\r\n  },\r\n  mounted() {\r\n    this.productService.getProducts().then(data => this.products = data);\r\n  },\r\n  methods: {\r\n    formatCurrency(value) {\r\n      if(value)\r\n        return value.toLocaleString('en-US', {style: 'currency', currency: 'USD'});\r\n      return;\r\n    },\r\n    openNew() {\r\n      this.product = {};\r\n      this.submitted = false;\r\n      this.productDialog = true;\r\n    },\r\n    hideDialog() {\r\n      this.productDialog = false;\r\n      this.submitted = false;\r\n    },\r\n    saveProduct() {\r\n      this.submitted = true;\r\n      if (this.product.name.trim()) {\r\n        if (this.product.id) {\r\n          this.product.inventoryStatus = this.product.inventoryStatus.value ? this.product.inventoryStatus.value: this.product.inventoryStatus;\r\n          this.products[this.findIndexById(this.product.id)] = this.product;\r\n          this.$toast.add({severity:'success', summary: 'Successful', detail: 'Product Updated', life: 3000});\r\n        }\r\n        else {\r\n          this.product.id = this.createId();\r\n          this.product.code = this.createId();\r\n          this.product.image = 'product-placeholder.svg';\r\n          this.product.inventoryStatus = this.product.inventoryStatus ? this.product.inventoryStatus.value : 'INSTOCK';\r\n          this.products.push(this.product);\r\n          this.$toast.add({severity:'success', summary: 'Successful', detail: 'Product Created', life: 3000});\r\n        }\r\n        this.productDialog = false;\r\n        this.product = {};\r\n      }\r\n    },\r\n    editProduct(product) {\r\n      this.product = {...product};\r\n      this.productDialog = true;\r\n    },\r\n    confirmDeleteProduct(product) {\r\n      this.product = product;\r\n      this.deleteProductDialog = true;\r\n    },\r\n    deleteProduct() {\r\n      this.products = this.products.filter(val => val.id !== this.product.id);\r\n      this.deleteProductDialog = false;\r\n      this.product = {};\r\n      this.$toast.add({severity:'success', summary: 'Successful', detail: 'Product Deleted', life: 3000});\r\n    },\r\n    findIndexById(id) {\r\n      let index = -1;\r\n      for (let i = 0; i < this.products.length; i++) {\r\n        if (this.products[i].id === id) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n      return index;\r\n    },\r\n    createId() {\r\n      let id = '';\r\n      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n      for ( var i = 0; i < 5; i++ ) {\r\n        id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n      }\r\n      return id;\r\n    },\r\n    exportCSV() {\r\n      this.$refs.dt.exportCSV();\r\n    },\r\n    confirmDeleteSelected() {\r\n      this.deleteProductsDialog = true;\r\n    },\r\n    deleteSelectedProducts() {\r\n      this.products = this.products.filter(val => !this.selectedProducts.includes(val));\r\n      this.deleteProductsDialog = false;\r\n      this.selectedProducts = null;\r\n      this.$toast.add({severity:'success', summary: 'Successful', detail: 'Products Deleted', life: 3000});\r\n    },\r\n    initFilters() {\r\n      this.filters = {\r\n        'global': {value: null, matchMode: FilterMatchMode.CONTAINS},\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '../assets/demo/badges.scss';\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}