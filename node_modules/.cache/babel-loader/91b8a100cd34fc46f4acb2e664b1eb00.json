{"ast":null,"code":"import { useI18n } from 'vue-i18n';\nimport Constants from '/src/commons/Constants';\nimport RolesDialog from './dialogs/RolesDialog.vue';\nimport CustomConfirmDialog from \"/src/components/CustomConfirmDialog.vue\";\nimport OrganizationsDialog from \"./dialogs/OrganizationsDialog.vue\";\nimport { defaultOrganizationRole, getOrganizationRole, leaveOrganization, removeDefaultRole, removeOrganizationRole } from \"/src/api/admin/userApi\";\nimport { toastError, toastSuccess, toastWarn } from \"/src/commons/ToastCustomService\";\nexport default {\n  name: \"RoleAndOrganization\",\n\n  data() {\n    return {\n      type: \"\",\n      organization: {},\n      defaultRoles: this.user.roles.filter(role => role.roleType === Constants.roleType.roleTypeDefault),\n      rolesDialog: false,\n      organizations: [],\n      organizationsDialog: false,\n      defaultOrganizationRoles: this.user.roles.filter(role => role.roleType === Constants.roleType.roleTypeOrganization),\n      defaultOrganizationRoleDialog: false,\n      confirmDialog: false,\n      confirmMessage: \"\",\n      item: {},\n      actionConfirm: () => {}\n    };\n  },\n\n  setup() {\n    const {\n      t\n    } = useI18n();\n    return {\n      t,\n      Constants\n    };\n  },\n\n  created() {\n    this.loadOrganizationRole();\n  },\n\n  methods: {\n    loadOrganizationRole() {\n      const api = getOrganizationRole({\n        userId: this.user.id\n      });\n      api.then(response => {\n        this.organizations = response;\n      }).catch(() => {\n        toastError({});\n      });\n    },\n\n    updateRole(type, selectedRole) {\n      if (type === Constants.roleType.roleTypeDefault) {\n        this.defaultRoles.push(selectedRole);\n      } else if (type === Constants.roleType.roleTypeOrganization) {\n        if (!this.organization.roles) {\n          this.organization.roles = [];\n        }\n\n        this.organization.roles.push(selectedRole);\n        const organizationIndex = this.organizations.findIndex(item => {\n          return item.organizationId === this.organization.organizationId;\n        });\n        this.organizations[organizationIndex] = this.organization;\n      }\n    },\n\n    confirmRemoveDefaultRole(role) {\n      this.confirmDialog = true;\n      this.confirmMessage = this.$t(\"roleAndOrganization.confirmRemoveDefaultRole\", {\n        itemName: role.roleName\n      });\n\n      this.actionConfirm = () => this.removeDefaultRole(role.roleId);\n    },\n\n    removeDefaultRole(roleId) {\n      const api = removeDefaultRole({\n        userId: this.user.id,\n        roleId\n      });\n      api.then(() => {\n        this.defaultRoles = this.defaultRoles.filter(role => role.roleId !== roleId);\n        this.hideDialogs();\n        toastSuccess({});\n      }).catch(() => {\n        toastError({});\n      });\n    },\n\n    updateOrganization(organization) {\n      this.organizations.push(organization);\n    },\n\n    confirmRemoveOrganization(organization) {\n      this.confirmDialog = true;\n      this.confirmMessage = this.$t(\"roleAndOrganization.confirmRemoveOrganization\", {\n        itemName: organization.organizationName\n      });\n\n      this.actionConfirm = () => this.removeOrganization(organization.organizationId);\n    },\n\n    showRolesDialog() {\n      this.type = Constants.roleType.roleTypeDefault;\n      this.rolesDialog = true;\n    },\n\n    showOrganizationRoleDialog(organization) {\n      this.type = Constants.roleType.roleTypeOrganization;\n      this.organization = organization;\n      this.rolesDialog = true;\n    },\n\n    showOrganizationsDialog() {\n      this.organizationsDialog = true;\n    },\n\n    setDefaultOrganizationRole(organization, role) {\n      if (role.isDefault) {\n        toastWarn({\n          message: this.$t(\"roleAndOrganization.roleAlreadyDefault\")\n        });\n        return;\n      }\n\n      const api = defaultOrganizationRole({\n        id: {\n          userId: this.user.id,\n          organizationId: organization.organizationId,\n          roleId: role.roleId\n        },\n        isDefault: true\n      });\n      api.then(() => {\n        this.organizations.forEach(org => {\n          org.roles && org.roles.length && org.roles.forEach(r => {\n            if (r.roleId === role.roleId && org.organizationId === organization.organizationId) {\n              r.isDefault = true;\n            } else {\n              r.isDefault = false;\n            }\n          });\n        });\n        toastSuccess({});\n      }).catch(() => {\n        toastError({});\n      });\n    },\n\n    confirmRemoveOrganizationRole(organization, role) {\n      this.confirmDialog = true;\n      this.confirmMessage = this.$t(\"roleAndOrganization.confirmRemoveOrganizationRole\", {\n        itemName: role.roleName\n      });\n\n      this.actionConfirm = () => this.removeOrganizationRole(organization, role);\n    },\n\n    removeOrganizationRole(organization, role) {\n      const api = removeOrganizationRole({\n        id: {\n          userId: this.user.id,\n          organizationId: organization.organizationId,\n          roleId: role.roleId\n        },\n        isDefault: true\n      });\n      api.then(() => {\n        const {\n          roles\n        } = organization;\n        organization.roles = roles.filter(item => {\n          return item.roleId !== role.roleId;\n        });\n        const organizationIndex = this.organizations.findIndex(item => {\n          return item.organizationId === organization.organizationId;\n        });\n        this.organizations[organizationIndex] = organization;\n        this.hideDialogs();\n        toastSuccess({});\n      }).catch(() => {\n        toastError({});\n      });\n    },\n\n    removeOrganization(organizationId) {\n      const api = leaveOrganization({\n        id: {\n          userId: this.user.id,\n          organizationId: organizationId,\n          roleId: null\n        },\n        isDefault: false\n      });\n      api.then(() => {\n        const organizationIndex = this.organizations.findIndex(item => {\n          return item.organizationId === organizationId;\n        });\n        this.organizations.splice(organizationIndex, 1);\n        this.hideDialogs();\n        toastSuccess({});\n      }).catch(() => {\n        toastError({});\n      });\n    },\n\n    hideDialogs() {\n      this.rolesDialog = false;\n      this.defaultOrganizationRoleDialog = false;\n      this.confirmDialog = false;\n      this.organizationsDialog = false;\n    }\n\n  },\n  components: {\n    RolesDialog,\n    OrganizationsDialog,\n    CustomConfirmDialog\n  },\n  props: ['user']\n};","map":{"version":3,"mappings":"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","names":["useI18n","Constants","RolesDialog","CustomConfirmDialog","OrganizationsDialog","defaultOrganizationRole","getOrganizationRole","leaveOrganization","removeDefaultRole","removeOrganizationRole","toastError","toastSuccess","toastWarn","name","data","type","organization","defaultRoles","user","roles","filter","role","roleType","roleTypeDefault","rolesDialog","organizations","organizationsDialog","defaultOrganizationRoles","roleTypeOrganization","defaultOrganizationRoleDialog","confirmDialog","confirmMessage","item","actionConfirm","setup","t","created","loadOrganizationRole","methods","api","userId","id","then","response","catch","updateRole","selectedRole","push","organizationIndex","findIndex","organizationId","confirmRemoveDefaultRole","$t","itemName","roleName","roleId","hideDialogs","updateOrganization","confirmRemoveOrganization","organizationName","removeOrganization","showRolesDialog","showOrganizationRoleDialog","showOrganizationsDialog","setDefaultOrganizationRole","isDefault","message","forEach","org","length","r","confirmRemoveOrganizationRole","splice","components","props"],"sourceRoot":"","sources":["D:\\0. TaiPT\\2.Vue JS\\sakai-vue\\src\\view\\system-management\\user\\RoleAndOrganization.vue"],"sourcesContent":["<template>\r\n  <div class=\"role-organization\">\r\n    <h5>{{ `${t('userDetail.roleAndOrganization')}` }}</h5>\r\n    <div class=\"default-roles-container\">\r\n      <div class=\"flex justify-content-between align-items-center mt-5 mb-3\">\r\n        <label for=\"defaultRole\">{{ t('roleAndOrganization.defaultRole') }}</label>\r\n        <Button :label=\"t('select')\" @click=\"showRolesDialog\"/>\r\n      </div>\r\n      <!--      <Divider/>-->\r\n      <div class=\"list-default-roles\">\r\n        <DataTable v-if=\"defaultRoles.length\" :value=\"defaultRoles\" responsiveLayout=\"scroll\">\r\n          <Column :header=\"t('roleAndOrganization.defaultRole')\" field=\"roleName\"></Column>\r\n          <Column :header=\"t('actions')\">\r\n            <template #body=\"slotProps\">\r\n              <Button v-tooltip.top=\"t('delete')\" class=\"p-button-rounded p-button-danger p-button-text p-button-sm\"\r\n                      icon=\"pi pi-times\" @click=\"confirmRemoveDefaultRole(slotProps.data)\"/>\r\n            </template>\r\n          </Column>\r\n        </DataTable>\r\n        <div v-else>\r\n          <label class=\"text-center block\">{{ t('emptyRecords', {itemName: t('role.name')}) }}</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"organization-container\">\r\n      <div class=\"flex justify-content-between align-items-center mt-5 mb-3\">\r\n        <label for=\"organizations\">{{ t('roleAndOrganization.organizations') }}</label>\r\n        <Button :label=\"t('select')\" @click=\"showOrganizationsDialog\"/>\r\n      </div>\r\n      <!--      <Divider/>-->\r\n      <div class=\"list-organization\">\r\n        <DataTable v-if=\"organizations.length\" :value=\"organizations\" responsiveLayout=\"scroll\">\r\n          <Column :header=\"t('roleAndOrganization.organizations')\" field=\"organizationName\"></Column>\r\n          <Column :header=\"t('roleAndOrganization.organizationRole')\">\r\n            <template #body=\"slotProps\">\r\n              <label v-for=\"role of slotProps.data.roles\">\r\n                <div v-if=\"role && role.roleId\" :class=\"{'organization-role-default' : role.isDefault}\"\r\n                     class=\"organization-role-chip border-none p-0 mr-3\">\r\n                  <Button v-tooltip.top=\"role.isDefault ? null : t('roleAndOrganization.setDefault')\"\r\n                          class=\"m-0 px-3\"\r\n                          @click=\"setDefaultOrganizationRole(slotProps.data, role)\">\r\n                    {{ role.roleName }}\r\n                  </Button>\r\n                  <Button\r\n                      v-if=\"!role.isDefault\"\r\n                      v-tooltip.top=\"role.isDefault ? null : t('delete')\"\r\n                      class=\"\"\r\n                      icon=\"pi pi-times\"\r\n                      @click=\"confirmRemoveOrganizationRole(slotProps.data, role)\"\r\n                  />\r\n                </div>\r\n              </label>\r\n            </template>\r\n          </Column>\r\n          <Column :header=\"t('actions')\">\r\n            <template #body=\"slotProps\">\r\n              <Button\r\n                  v-tooltip.top=\"t('roleAndOrganization.addRole')\"\r\n                  class=\"p-button-rounded p-button-text p-button-sm\"\r\n                  icon=\"pi pi-plus\"\r\n                  @click=\"showOrganizationRoleDialog(slotProps.data)\"\r\n              />\r\n              <Button v-tooltip.top=\"t('delete')\" class=\"p-button-rounded p-button-danger p-button-text p-button-sm\"\r\n                      icon=\"pi pi-times\" @click=\"confirmRemoveOrganization(slotProps.data)\"/>\r\n            </template>\r\n          </Column>\r\n        </DataTable>\r\n        <div v-else>\r\n          <label class=\"text-center block\">{{ t('emptyRecords', {itemName: t('organization.name')}) }}</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <RolesDialog\r\n      v-if=\"rolesDialog\"\r\n      :default-roles=\"defaultRoles\"\r\n      :hide-dialogs=\"hideDialogs\"\r\n      :organization=\"organization\"\r\n      :roles-dialog=\"rolesDialog\"\r\n      :type=\"type\"\r\n      :update-role=\"updateRole\"\r\n      :user=\"user\"\r\n  />\r\n\r\n  <OrganizationsDialog\r\n      v-if=\"organizationsDialog\"\r\n      :hide-dialogs=\"hideDialogs\"\r\n      :organizations=\"organizations\"\r\n      :organizations-dialog=\"organizationsDialog\"\r\n      :update-organization=\"updateOrganization\"\r\n      :user=\"user\"\r\n  />\r\n\r\n  <CustomConfirmDialog\r\n      v-if=\"confirmDialog\"\r\n      :action-confirm=\"actionConfirm\"\r\n      :confirm-dialog=\"confirmDialog\"\r\n      :confirm-message=\"confirmMessage\"\r\n      :hide-dialogs=\"hideDialogs\"\r\n      :item=\"item\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport {useI18n} from 'vue-i18n';\r\nimport Constants from '/src/commons/Constants';\r\nimport RolesDialog from './dialogs/RolesDialog.vue';\r\nimport CustomConfirmDialog from \"/src/components/CustomConfirmDialog.vue\";\r\nimport OrganizationsDialog from \"./dialogs/OrganizationsDialog.vue\";\r\nimport {\r\n  defaultOrganizationRole,\r\n  getOrganizationRole,\r\n  leaveOrganization,\r\n  removeDefaultRole,\r\n  removeOrganizationRole\r\n} from \"/src/api/admin/userApi\";\r\nimport {toastError, toastSuccess, toastWarn} from \"/src/commons/ToastCustomService\";\r\n\r\nexport default {\r\n  name: \"RoleAndOrganization\",\r\n\r\n  data() {\r\n    return {\r\n      type: \"\",\r\n      organization: {},\r\n\r\n      defaultRoles: this.user.roles.filter(role => role.roleType === Constants.roleType.roleTypeDefault),\r\n      rolesDialog: false,\r\n\r\n      organizations: [],\r\n      organizationsDialog: false,\r\n\r\n      defaultOrganizationRoles: this.user.roles.filter(role => role.roleType === Constants.roleType.roleTypeOrganization),\r\n      defaultOrganizationRoleDialog: false,\r\n\r\n      confirmDialog: false,\r\n      confirmMessage: \"\",\r\n      item: {},\r\n      actionConfirm: () => {\r\n      }\r\n    }\r\n  },\r\n\r\n  setup() {\r\n    const {t} = useI18n();\r\n    return {t, Constants};\r\n  },\r\n\r\n  created() {\r\n    this.loadOrganizationRole();\r\n  },\r\n\r\n  methods: {\r\n    loadOrganizationRole() {\r\n      const api = getOrganizationRole({userId: this.user.id});\r\n      api.then((response) => {\r\n\r\n        this.organizations = response;\r\n      }).catch(() => {\r\n        toastError({});\r\n      });\r\n    },\r\n\r\n    updateRole(type, selectedRole) {\r\n      if (type === Constants.roleType.roleTypeDefault) {\r\n        this.defaultRoles.push(selectedRole);\r\n      } else if (type === Constants.roleType.roleTypeOrganization) {\r\n        if (!this.organization.roles) {\r\n          this.organization.roles = [];\r\n        }\r\n        this.organization.roles.push(selectedRole);\r\n        const organizationIndex = this.organizations.findIndex((item) => {\r\n          return item.organizationId === this.organization.organizationId;\r\n        });\r\n        this.organizations[organizationIndex] = this.organization;\r\n      }\r\n    },\r\n\r\n    confirmRemoveDefaultRole(role) {\r\n      this.confirmDialog = true;\r\n      this.confirmMessage = this.$t(\"roleAndOrganization.confirmRemoveDefaultRole\", {itemName: role.roleName});\r\n      this.actionConfirm = () => this.removeDefaultRole(role.roleId);\r\n    },\r\n\r\n    removeDefaultRole(roleId) {\r\n      const api = removeDefaultRole({\r\n        userId: this.user.id,\r\n        roleId\r\n      });\r\n\r\n      api.then(() => {\r\n        this.defaultRoles = this.defaultRoles.filter((role) =>\r\n            role.roleId !== roleId\r\n        );\r\n        this.hideDialogs();\r\n        toastSuccess({});\r\n      }).catch(() => {\r\n        toastError({});\r\n      });\r\n    },\r\n\r\n    updateOrganization(organization) {\r\n      this.organizations.push(organization);\r\n    },\r\n\r\n    confirmRemoveOrganization(organization) {\r\n      this.confirmDialog = true;\r\n      this.confirmMessage = this.$t(\"roleAndOrganization.confirmRemoveOrganization\", {itemName: organization.organizationName});\r\n      this.actionConfirm = () => this.removeOrganization(organization.organizationId);\r\n    },\r\n\r\n    showRolesDialog() {\r\n      this.type = Constants.roleType.roleTypeDefault;\r\n      this.rolesDialog = true;\r\n    },\r\n\r\n    showOrganizationRoleDialog(organization) {\r\n      this.type = Constants.roleType.roleTypeOrganization;\r\n      this.organization = organization;\r\n      this.rolesDialog = true;\r\n    },\r\n\r\n    showOrganizationsDialog() {\r\n      this.organizationsDialog = true;\r\n    },\r\n\r\n    setDefaultOrganizationRole(organization, role) {\r\n      if (role.isDefault) {\r\n        toastWarn({\r\n          message: this.$t(\"roleAndOrganization.roleAlreadyDefault\")\r\n        });\r\n        return;\r\n      }\r\n\r\n      const api = defaultOrganizationRole({\r\n        id: {\r\n          userId: this.user.id,\r\n          organizationId: organization.organizationId,\r\n          roleId: role.roleId\r\n        },\r\n        isDefault: true\r\n      });\r\n      api.then(() => {\r\n        this.organizations.forEach((org) => {\r\n          org.roles && org.roles.length && org.roles.forEach((r) => {\r\n            if (r.roleId === role.roleId && org.organizationId === organization.organizationId) {\r\n              r.isDefault = true\r\n            } else {\r\n              r.isDefault = false;\r\n            }\r\n          });\r\n        });\r\n        toastSuccess({});\r\n      }).catch(() => {\r\n        toastError({});\r\n      });\r\n    },\r\n\r\n    confirmRemoveOrganizationRole(organization, role) {\r\n      this.confirmDialog = true;\r\n      this.confirmMessage = this.$t(\"roleAndOrganization.confirmRemoveOrganizationRole\", {itemName: role.roleName});\r\n      this.actionConfirm = () => this.removeOrganizationRole(organization, role);\r\n    },\r\n\r\n    removeOrganizationRole(organization, role) {\r\n      const api = removeOrganizationRole({\r\n        id: {\r\n          userId: this.user.id,\r\n          organizationId: organization.organizationId,\r\n          roleId: role.roleId\r\n        },\r\n        isDefault: true\r\n      });\r\n      api.then(() => {\r\n        const {roles} = organization;\r\n        organization.roles = roles.filter((item) => {\r\n          return item.roleId !== role.roleId;\r\n        });\r\n        const organizationIndex = this.organizations.findIndex((item) => {\r\n          return item.organizationId === organization.organizationId;\r\n        });\r\n        this.organizations[organizationIndex] = organization;\r\n        this.hideDialogs();\r\n        toastSuccess({});\r\n      }).catch(() => {\r\n        toastError({});\r\n      });\r\n    },\r\n\r\n    removeOrganization(organizationId) {\r\n      const api = leaveOrganization({\r\n        id: {\r\n          userId: this.user.id,\r\n          organizationId: organizationId,\r\n          roleId: null\r\n        },\r\n        isDefault: false\r\n      });\r\n      api.then(() => {\r\n        const organizationIndex = this.organizations.findIndex((item) => {\r\n          return item.organizationId === organizationId;\r\n        });\r\n        this.organizations.splice(organizationIndex, 1);\r\n        this.hideDialogs();\r\n        toastSuccess({});\r\n      }).catch(() => {\r\n        toastError({});\r\n      });\r\n    },\r\n\r\n    hideDialogs() {\r\n      this.rolesDialog = false;\r\n      this.defaultOrganizationRoleDialog = false;\r\n      this.confirmDialog = false;\r\n      this.organizationsDialog = false;\r\n    }\r\n  },\r\n\r\n  components: {\r\n    RolesDialog,\r\n    OrganizationsDialog,\r\n    CustomConfirmDialog\r\n  },\r\n\r\n  props: ['user']\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}