{"ast":null,"code":"import InputText from 'primevue/inputtext';\nimport Button from 'primevue/button';\nimport { resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, mergeProps, toHandlers, createCommentVNode, createBlock } from 'vue';\nvar script = {\n  name: 'InputNumber',\n  emits: ['update:modelValue', 'input', 'focus', 'blur'],\n  props: {\n    modelValue: {\n      type: Number,\n      default: null\n    },\n    format: {\n      type: Boolean,\n      default: true\n    },\n    showButtons: {\n      type: Boolean,\n      default: false\n    },\n    buttonLayout: {\n      type: String,\n      default: 'stacked'\n    },\n    incrementButtonClass: {\n      type: String,\n      default: null\n    },\n    decrementButtonClass: {\n      type: String,\n      default: null\n    },\n    incrementButtonIcon: {\n      type: String,\n      default: 'pi pi-angle-up'\n    },\n    decrementButtonIcon: {\n      type: String,\n      default: 'pi pi-angle-down'\n    },\n    locale: {\n      type: String,\n      default: undefined\n    },\n    localeMatcher: {\n      type: String,\n      default: undefined\n    },\n    mode: {\n      type: String,\n      default: 'decimal'\n    },\n    prefix: {\n      type: String,\n      default: null\n    },\n    suffix: {\n      type: String,\n      default: null\n    },\n    currency: {\n      type: String,\n      default: undefined\n    },\n    currencyDisplay: {\n      type: String,\n      default: undefined\n    },\n    useGrouping: {\n      type: Boolean,\n      default: true\n    },\n    minFractionDigits: {\n      type: Number,\n      default: undefined\n    },\n    maxFractionDigits: {\n      type: Number,\n      default: undefined\n    },\n    min: {\n      type: Number,\n      default: null\n    },\n    max: {\n      type: Number,\n      default: null\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    allowEmpty: {\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    inputId: null,\n    inputClass: null,\n    inputStyle: null,\n    inputProps: null,\n    incrementButtonProps: null,\n    decrementButtonProps: null,\n    'aria-labelledby': {\n      type: String,\n      default: null\n    },\n    'aria-label': {\n      type: String,\n      default: null\n    }\n  },\n  numberFormat: null,\n  _numeral: null,\n  _decimal: null,\n  _group: null,\n  _minusSign: null,\n  _currency: null,\n  _suffix: null,\n  _prefix: null,\n  _index: null,\n  groupChar: '',\n  isSpecialChar: null,\n  prefixChar: null,\n  suffixChar: null,\n  timer: null,\n\n  data() {\n    return {\n      d_modelValue: this.modelValue,\n      focused: false\n    };\n  },\n\n  watch: {\n    modelValue(newValue) {\n      this.d_modelValue = newValue;\n    },\n\n    locale(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    localeMatcher(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    mode(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    currency(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    currencyDisplay(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    useGrouping(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    minFractionDigits(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    maxFractionDigits(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    suffix(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    prefix(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    }\n\n  },\n\n  created() {\n    this.constructParser();\n  },\n\n  methods: {\n    getOptions() {\n      return {\n        localeMatcher: this.localeMatcher,\n        style: this.mode,\n        currency: this.currency,\n        currencyDisplay: this.currencyDisplay,\n        useGrouping: this.useGrouping,\n        minimumFractionDigits: this.minFractionDigits,\n        maximumFractionDigits: this.maxFractionDigits\n      };\n    },\n\n    constructParser() {\n      this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n      const numerals = [...new Intl.NumberFormat(this.locale, {\n        useGrouping: false\n      }).format(9876543210)].reverse();\n      const index = new Map(numerals.map((d, i) => [d, i]));\n      this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n      this._group = this.getGroupingExpression();\n      this._minusSign = this.getMinusSignExpression();\n      this._currency = this.getCurrencyExpression();\n      this._decimal = this.getDecimalExpression();\n      this._suffix = this.getSuffixExpression();\n      this._prefix = this.getPrefixExpression();\n\n      this._index = d => index.get(d);\n    },\n\n    updateConstructParser(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.constructParser();\n      }\n    },\n\n    escapeRegExp(text) {\n      return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    },\n\n    getDecimalExpression() {\n      const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(),\n        useGrouping: false\n      });\n      return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n    },\n\n    getGroupingExpression() {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        useGrouping: true\n      });\n      this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n      return new RegExp(`[${this.groupChar}]`, 'g');\n    },\n\n    getMinusSignExpression() {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        useGrouping: false\n      });\n      return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    },\n\n    getCurrencyExpression() {\n      if (this.currency) {\n        const formatter = new Intl.NumberFormat(this.locale, {\n          style: 'currency',\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        });\n        return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n      }\n\n      return new RegExp(`[]`, 'g');\n    },\n\n    getPrefixExpression() {\n      if (this.prefix) {\n        this.prefixChar = this.prefix;\n      } else {\n        const formatter = new Intl.NumberFormat(this.locale, {\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay\n        });\n        this.prefixChar = formatter.format(1).split('1')[0];\n      }\n\n      return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n    },\n\n    getSuffixExpression() {\n      if (this.suffix) {\n        this.suffixChar = this.suffix;\n      } else {\n        const formatter = new Intl.NumberFormat(this.locale, {\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        });\n        this.suffixChar = formatter.format(1).split('1')[1];\n      }\n\n      return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n    },\n\n    formatValue(value) {\n      if (value != null) {\n        if (value === '-') {\n          // Minus sign\n          return value;\n        }\n\n        if (this.format) {\n          let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n          let formattedValue = formatter.format(value);\n\n          if (this.prefix) {\n            formattedValue = this.prefix + formattedValue;\n          }\n\n          if (this.suffix) {\n            formattedValue = formattedValue + this.suffix;\n          }\n\n          return formattedValue;\n        }\n\n        return value.toString();\n      }\n\n      return '';\n    },\n\n    parseValue(text) {\n      let filteredText = text.replace(this._suffix, '').replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '').replace(this._group, '').replace(this._minusSign, '-').replace(this._decimal, '.').replace(this._numeral, this._index);\n\n      if (filteredText) {\n        if (filteredText === '-') // Minus sign\n          return filteredText;\n        let parsedValue = +filteredText;\n        return isNaN(parsedValue) ? null : parsedValue;\n      }\n\n      return null;\n    },\n\n    repeat(event, interval, dir) {\n      if (this.readonly) {\n        return;\n      }\n\n      let i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(() => {\n        this.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    },\n\n    spin(event, dir) {\n      if (this.$refs.input) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    },\n\n    onUpButtonMouseDown(event) {\n      if (!this.disabled) {\n        this.$refs.input.$el.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n      }\n    },\n\n    onUpButtonMouseUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onUpButtonMouseLeave() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onUpButtonKeyUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onUpButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, 1);\n      }\n    },\n\n    onDownButtonMouseDown(event) {\n      if (!this.disabled) {\n        this.$refs.input.$el.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n      }\n    },\n\n    onDownButtonMouseUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onDownButtonMouseLeave() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onDownButtonKeyUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onDownButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, -1);\n      }\n    },\n\n    onUserInput() {\n      if (this.isSpecialChar) {\n        this.$refs.input.$el.value = this.lastValue;\n      }\n\n      this.isSpecialChar = false;\n    },\n\n    onInputKeyDown(event) {\n      if (this.readonly) {\n        return;\n      }\n\n      this.lastValue = event.target.value;\n\n      if (event.shiftKey || event.altKey) {\n        this.isSpecialChar = true;\n        return;\n      }\n\n      let selectionStart = event.target.selectionStart;\n      let selectionEnd = event.target.selectionEnd;\n      let inputValue = event.target.value;\n      let newValueStr = null;\n\n      if (event.altKey) {\n        event.preventDefault();\n      }\n\n      switch (event.which) {\n        //up\n        case 38:\n          this.spin(event, 1);\n          event.preventDefault();\n          break;\n        //down\n\n        case 40:\n          this.spin(event, -1);\n          event.preventDefault();\n          break;\n        //left\n\n        case 37:\n          if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n            event.preventDefault();\n          }\n\n          break;\n        //right\n\n        case 39:\n          if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n            event.preventDefault();\n          }\n\n          break;\n        //tab and enter\n\n        case 9:\n        case 13:\n          newValueStr = this.validateValue(this.parseValue(inputValue));\n          this.$refs.input.$el.value = this.formatValue(newValueStr);\n          this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n          this.updateModel(event, newValueStr);\n          break;\n        //backspace\n\n        case 8:\n          {\n            event.preventDefault();\n\n            if (selectionStart === selectionEnd) {\n              const deleteChar = inputValue.charAt(selectionStart - 1);\n              const {\n                decimalCharIndex,\n                decimalCharIndexWithoutPrefix\n              } = this.getDecimalCharIndexes(inputValue);\n\n              if (this.isNumeralChar(deleteChar)) {\n                const decimalLength = this.getDecimalLength(inputValue);\n\n                if (this._group.test(deleteChar)) {\n                  this._group.lastIndex = 0;\n                  newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                } else if (this._decimal.test(deleteChar)) {\n                  this._decimal.lastIndex = 0;\n\n                  if (decimalLength) {\n                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                  } else {\n                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                  }\n                } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                  const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                } else if (decimalCharIndexWithoutPrefix === 1) {\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                  newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                }\n              }\n\n              this.updateValue(event, newValueStr, null, 'delete-single');\n            } else {\n              newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n              this.updateValue(event, newValueStr, null, 'delete-range');\n            }\n\n            break;\n          }\n        // del\n\n        case 46:\n          event.preventDefault();\n\n          if (selectionStart === selectionEnd) {\n            const deleteChar = inputValue.charAt(selectionStart);\n            const {\n              decimalCharIndex,\n              decimalCharIndexWithoutPrefix\n            } = this.getDecimalCharIndexes(inputValue);\n\n            if (this.isNumeralChar(deleteChar)) {\n              const decimalLength = this.getDecimalLength(inputValue);\n\n              if (this._group.test(deleteChar)) {\n                this._group.lastIndex = 0;\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n              } else if (this._decimal.test(deleteChar)) {\n                this._decimal.lastIndex = 0;\n\n                if (decimalLength) {\n                  this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                }\n              } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n              } else if (decimalCharIndexWithoutPrefix === 1) {\n                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n              }\n            }\n\n            this.updateValue(event, newValueStr, null, 'delete-back-single');\n          } else {\n            newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, null, 'delete-range');\n          }\n\n          break;\n        //home\n\n        case 36:\n          if (this.min) {\n            this.updateModel(event, this.min);\n            event.preventDefault();\n          }\n\n          break;\n        //end\n\n        case 35:\n          if (this.max) {\n            this.updateModel(event, this.max);\n            event.preventDefault();\n          }\n\n          break;\n      }\n    },\n\n    onInputKeyPress(event) {\n      if (this.readonly) {\n        return;\n      }\n\n      event.preventDefault();\n      let code = event.which || event.keyCode;\n      let char = String.fromCharCode(code);\n      const isDecimalSign = this.isDecimalSign(char);\n      const isMinusSign = this.isMinusSign(char);\n\n      if (48 <= code && code <= 57 || isMinusSign || isDecimalSign) {\n        this.insert(event, char, {\n          isDecimalSign,\n          isMinusSign\n        });\n      }\n    },\n\n    onPaste(event) {\n      event.preventDefault();\n      let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n      if (data) {\n        let filteredData = this.parseValue(data);\n\n        if (filteredData != null) {\n          this.insert(event, filteredData.toString());\n        }\n      }\n    },\n\n    allowMinusSign() {\n      return this.min === null || this.min < 0;\n    },\n\n    isMinusSign(char) {\n      if (this._minusSign.test(char) || char === '-') {\n        this._minusSign.lastIndex = 0;\n        return true;\n      }\n\n      return false;\n    },\n\n    isDecimalSign(char) {\n      if (this._decimal.test(char)) {\n        this._decimal.lastIndex = 0;\n        return true;\n      }\n\n      return false;\n    },\n\n    isDecimalMode() {\n      return this.mode === 'decimal';\n    },\n\n    getDecimalCharIndexes(val) {\n      let decimalCharIndex = val.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n      const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      return {\n        decimalCharIndex,\n        decimalCharIndexWithoutPrefix\n      };\n    },\n\n    getCharIndexes(val) {\n      const decimalCharIndex = val.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      const minusCharIndex = val.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n      const suffixCharIndex = val.search(this._suffix);\n      this._suffix.lastIndex = 0;\n      const currencyCharIndex = val.search(this._currency);\n      this._currency.lastIndex = 0;\n      return {\n        decimalCharIndex,\n        minusCharIndex,\n        suffixCharIndex,\n        currencyCharIndex\n      };\n    },\n\n    insert(event, text, sign = {\n      isDecimalSign: false,\n      isMinusSign: false\n    }) {\n      const minusCharIndexOnText = text.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n\n      if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n        return;\n      }\n\n      const selectionStart = this.$refs.input.$el.selectionStart;\n      const selectionEnd = this.$refs.input.$el.selectionEnd;\n      let inputValue = this.$refs.input.$el.value.trim();\n      const {\n        decimalCharIndex,\n        minusCharIndex,\n        suffixCharIndex,\n        currencyCharIndex\n      } = this.getCharIndexes(inputValue);\n      let newValueStr;\n\n      if (sign.isMinusSign) {\n        if (selectionStart === 0) {\n          newValueStr = inputValue;\n\n          if (minusCharIndex === -1 || selectionEnd !== 0) {\n            newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n          }\n\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else if (sign.isDecimalSign) {\n        if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n          this.updateValue(event, inputValue, text, 'insert');\n        } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else {\n        const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n          if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n            const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n            newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n            this.updateValue(event, newValueStr, text, operation);\n          }\n        } else {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, operation);\n        }\n      }\n    },\n\n    insertText(value, text, start, end) {\n      let textSplit = text === '.' ? text : text.split('.');\n\n      if (textSplit.length === 2) {\n        const decimalCharIndex = value.slice(start, end).search(this._decimal);\n        this._decimal.lastIndex = 0;\n        return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);\n      } else if (end - start === value.length) {\n        return this.formatValue(text);\n      } else if (start === 0) {\n        return text + value.slice(end);\n      } else if (end === value.length) {\n        return value.slice(0, start) + text;\n      } else {\n        return value.slice(0, start) + text + value.slice(end);\n      }\n    },\n\n    deleteRange(value, start, end) {\n      let newValueStr;\n      if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n      return newValueStr;\n    },\n\n    initCursor() {\n      let selectionStart = this.$refs.input.$el.selectionStart;\n      let inputValue = this.$refs.input.$el.value;\n      let valueLength = inputValue.length;\n      let index = null; // remove prefix\n\n      let prefixLength = (this.prefixChar || '').length;\n      inputValue = inputValue.replace(this._prefix, '');\n      selectionStart = selectionStart - prefixLength;\n      let char = inputValue.charAt(selectionStart);\n\n      if (this.isNumeralChar(char)) {\n        return selectionStart + prefixLength;\n      } //left\n\n\n      let i = selectionStart - 1;\n\n      while (i >= 0) {\n        char = inputValue.charAt(i);\n\n        if (this.isNumeralChar(char)) {\n          index = i + prefixLength;\n          break;\n        } else {\n          i--;\n        }\n      }\n\n      if (index !== null) {\n        this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n      } else {\n        i = selectionStart;\n\n        while (i < valueLength) {\n          char = inputValue.charAt(i);\n\n          if (this.isNumeralChar(char)) {\n            index = i + prefixLength;\n            break;\n          } else {\n            i++;\n          }\n        }\n\n        if (index !== null) {\n          this.$refs.input.$el.setSelectionRange(index, index);\n        }\n      }\n\n      return index || 0;\n    },\n\n    onInputClick() {\n      if (!this.readonly) {\n        this.initCursor();\n      }\n    },\n\n    isNumeralChar(char) {\n      if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n        this.resetRegex();\n        return true;\n      }\n\n      return false;\n    },\n\n    resetRegex() {\n      this._numeral.lastIndex = 0;\n      this._decimal.lastIndex = 0;\n      this._group.lastIndex = 0;\n      this._minusSign.lastIndex = 0;\n    },\n\n    updateValue(event, valueStr, insertedValueStr, operation) {\n      let currentValue = this.$refs.input.$el.value;\n      let newValue = null;\n\n      if (valueStr != null) {\n        newValue = this.parseValue(valueStr);\n        newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n        this.updateInput(newValue, insertedValueStr, operation, valueStr);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    },\n\n    handleOnInput(event, currentValue, newValue) {\n      if (this.isValueChanged(currentValue, newValue)) {\n        this.$emit('input', {\n          originalEvent: event,\n          value: newValue\n        });\n      }\n    },\n\n    isValueChanged(currentValue, newValue) {\n      if (newValue === null && currentValue !== null) {\n        return true;\n      }\n\n      if (newValue != null) {\n        let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n        return newValue !== parsedCurrentValue;\n      }\n\n      return false;\n    },\n\n    validateValue(value) {\n      if (value === '-' || value == null) {\n        return null;\n      }\n\n      if (this.min != null && value < this.min) {\n        return this.min;\n      }\n\n      if (this.max != null && value > this.max) {\n        return this.max;\n      }\n\n      return value;\n    },\n\n    updateInput(value, insertedValueStr, operation, valueStr) {\n      insertedValueStr = insertedValueStr || '';\n      let inputValue = this.$refs.input.$el.value;\n      let newValue = this.formatValue(value);\n      let currentLength = inputValue.length;\n\n      if (newValue !== valueStr) {\n        newValue = this.concatValues(newValue, valueStr);\n      }\n\n      if (currentLength === 0) {\n        this.$refs.input.$el.value = newValue;\n        this.$refs.input.$el.setSelectionRange(0, 0);\n        const index = this.initCursor();\n        const selectionEnd = index + insertedValueStr.length;\n        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n      } else {\n        let selectionStart = this.$refs.input.$el.selectionStart;\n        let selectionEnd = this.$refs.input.$el.selectionEnd;\n        this.$refs.input.$el.value = newValue;\n        let newLength = newValue.length;\n\n        if (operation === 'range-insert') {\n          const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n          const startValueStr = startValue !== null ? startValue.toString() : '';\n          const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n          const sRegex = new RegExp(startExpr, 'g');\n          sRegex.test(newValue);\n          const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n          const tRegex = new RegExp(tExpr, 'g');\n          tRegex.test(newValue.slice(sRegex.lastIndex));\n          selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else if (newLength === currentLength) {\n          if (operation === 'insert' || operation === 'delete-back-single') this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);else if (operation === 'delete-single') this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);else if (operation === 'delete-range' || operation === 'spin') this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else if (operation === 'delete-back-single') {\n          let prevChar = inputValue.charAt(selectionEnd - 1);\n          let nextChar = inputValue.charAt(selectionEnd);\n          let diff = currentLength - newLength;\n\n          let isGroupChar = this._group.test(nextChar);\n\n          if (isGroupChar && diff === 1) {\n            selectionEnd += 1;\n          } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n            selectionEnd += -1 * diff + 1;\n          }\n\n          this._group.lastIndex = 0;\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else if (inputValue === '-' && operation === 'insert') {\n          this.$refs.input.$el.setSelectionRange(0, 0);\n          const index = this.initCursor();\n          const selectionEnd = index + insertedValueStr.length + 1;\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else {\n          selectionEnd = selectionEnd + (newLength - currentLength);\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        }\n      }\n\n      this.$refs.input.$el.setAttribute('aria-valuenow', value);\n    },\n\n    concatValues(val1, val2) {\n      if (val1 && val2) {\n        let decimalCharIndex = val2.search(this._decimal);\n        this._decimal.lastIndex = 0;\n        return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n      }\n\n      return val1;\n    },\n\n    getDecimalLength(value) {\n      if (value) {\n        const valueSplit = value.split(this._decimal);\n\n        if (valueSplit.length === 2) {\n          return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n        }\n      }\n\n      return 0;\n    },\n\n    updateModel(event, value) {\n      this.d_modelValue = value;\n      this.$emit('update:modelValue', value);\n    },\n\n    onInputFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n\n    onInputBlur(event) {\n      this.focused = false;\n      let input = event.target;\n      let newValue = this.validateValue(this.parseValue(input.value));\n      this.$emit('blur', {\n        originalEvent: event,\n        value: input.value\n      });\n      input.value = this.formatValue(newValue);\n      input.setAttribute('aria-valuenow', newValue);\n      this.updateModel(event, newValue);\n    },\n\n    clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    },\n\n    maxBoundry() {\n      return this.d_modelValue >= this.max;\n    },\n\n    minBoundry() {\n      return this.d_modelValue <= this.min;\n    }\n\n  },\n  computed: {\n    containerClass() {\n      return ['p-inputnumber p-component p-inputwrapper', {\n        'p-inputwrapper-filled': this.filled,\n        'p-inputwrapper-focus': this.focused,\n        'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n        'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n        'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'\n      }];\n    },\n\n    upButtonClass() {\n      return ['p-inputnumber-button p-inputnumber-button-up', this.incrementButtonClass, {\n        'p-disabled': this.showButtons && this.max !== null && this.maxBoundry()\n      }];\n    },\n\n    downButtonClass() {\n      return ['p-inputnumber-button p-inputnumber-button-down', this.decrementButtonClass, {\n        'p-disabled': this.showButtons && this.min !== null && this.minBoundry()\n      }];\n    },\n\n    filled() {\n      return this.modelValue != null && this.modelValue.toString().length > 0;\n    },\n\n    upButtonListeners() {\n      return {\n        mousedown: event => this.onUpButtonMouseDown(event),\n        mouseup: event => this.onUpButtonMouseUp(event),\n        mouseleave: event => this.onUpButtonMouseLeave(event),\n        keydown: event => this.onUpButtonKeyDown(event),\n        keyup: event => this.onUpButtonKeyUp(event)\n      };\n    },\n\n    downButtonListeners() {\n      return {\n        mousedown: event => this.onDownButtonMouseDown(event),\n        mouseup: event => this.onDownButtonMouseUp(event),\n        mouseleave: event => this.onDownButtonMouseLeave(event),\n        keydown: event => this.onDownButtonKeyDown(event),\n        keyup: event => this.onDownButtonKeyUp(event)\n      };\n    },\n\n    formattedValue() {\n      const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n      return this.formatValue(val);\n    },\n\n    getFormatter() {\n      return this.numberFormat;\n    }\n\n  },\n  components: {\n    'INInputText': InputText,\n    'INButton': Button\n  }\n};\nconst _hoisted_1 = {\n  key: 0,\n  class: \"p-inputnumber-button-group\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_INInputText = resolveComponent(\"INInputText\");\n\n  const _component_INButton = resolveComponent(\"INButton\");\n\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass($options.containerClass)\n  }, [createVNode(_component_INInputText, mergeProps({\n    ref: \"input\",\n    class: [\"p-inputnumber-input\", $props.inputClass],\n    role: \"spinbutton\",\n    id: $props.inputId,\n    style: $props.inputStyle,\n    value: $options.formattedValue,\n    \"aria-valuemin\": $props.min,\n    \"aria-valuemax\": $props.max,\n    \"aria-valuenow\": $props.modelValue,\n    readonly: $props.readonly,\n    placeholder: $props.placeholder,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    onInput: $options.onUserInput,\n    onKeydown: $options.onInputKeyDown,\n    onKeypress: $options.onInputKeyPress,\n    onPaste: $options.onPaste,\n    onClick: $options.onInputClick,\n    onFocus: $options.onInputFocus,\n    onBlur: $options.onInputBlur\n  }, $props.inputProps), null, 16, [\"id\", \"class\", \"style\", \"value\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"readonly\", \"placeholder\", \"aria-labelledby\", \"aria-label\", \"onInput\", \"onKeydown\", \"onKeypress\", \"onPaste\", \"onClick\", \"onFocus\", \"onBlur\"]), $props.showButtons && $props.buttonLayout === 'stacked' ? (openBlock(), createElementBlock(\"span\", _hoisted_1, [createVNode(_component_INButton, mergeProps({\n    class: $options.upButtonClass,\n    icon: $props.incrementButtonIcon\n  }, toHandlers($options.upButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]), createVNode(_component_INButton, mergeProps({\n    class: $options.downButtonClass,\n    icon: $props.decrementButtonIcon\n  }, toHandlers($options.downButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])])) : createCommentVNode(\"\", true), $props.showButtons && $props.buttonLayout !== 'stacked' ? (openBlock(), createBlock(_component_INButton, mergeProps({\n    key: 1,\n    class: $options.upButtonClass,\n    icon: $props.incrementButtonIcon\n  }, toHandlers($options.upButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])) : createCommentVNode(\"\", true), $props.showButtons && $props.buttonLayout !== 'stacked' ? (openBlock(), createBlock(_component_INButton, mergeProps({\n    key: 2,\n    class: $options.downButtonClass,\n    icon: $props.decrementButtonIcon\n  }, toHandlers($options.downButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])) : createCommentVNode(\"\", true)], 2);\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"\\n.p-inputnumber {\\n    display: -webkit-inline-box;\\n    display: -ms-inline-flexbox;\\n    display: inline-flex;\\n}\\n.p-inputnumber-button {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -webkit-box-flex: 0;\\n        -ms-flex: 0 0 auto;\\n            flex: 0 0 auto;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\\n    display: none;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-input {\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    border-bottom-left-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n        -ms-flex-direction: column;\\n            flex-direction: column;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1 1 auto;\\n            flex: 1 1 auto;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\\n    -webkit-box-ordinal-group: 4;\\n        -ms-flex-order: 3;\\n            order: 3;\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-inputnumber-input {\\n    -webkit-box-ordinal-group: 3;\\n        -ms-flex-order: 2;\\n            order: 2;\\n    border-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\\n    -webkit-box-ordinal-group: 2;\\n        -ms-flex-order: 1;\\n            order: 1;\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-vertical {\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n        -ms-flex-direction: column;\\n            flex-direction: column;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\\n    -webkit-box-ordinal-group: 2;\\n        -ms-flex-order: 1;\\n            order: 1;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    -webkit-box-ordinal-group: 3;\\n        -ms-flex-order: 2;\\n            order: 2;\\n    border-radius: 0;\\n    text-align: center;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\\n    -webkit-box-ordinal-group: 4;\\n        -ms-flex-order: 3;\\n            order: 3;\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-input {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1 1 auto;\\n            flex: 1 1 auto;\\n}\\n.p-fluid .p-inputnumber {\\n    width: 100%;\\n}\\n.p-fluid .p-inputnumber .p-inputnumber-input {\\n    width: 1%;\\n}\\n.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    width: 100%;\\n}\\n\";\nstyleInject(css_248z);\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["InputText","Button","resolveComponent","openBlock","createElementBlock","normalizeClass","createVNode","mergeProps","toHandlers","createCommentVNode","createBlock","script","name","emits","props","modelValue","type","Number","default","format","Boolean","showButtons","buttonLayout","String","incrementButtonClass","decrementButtonClass","incrementButtonIcon","decrementButtonIcon","locale","undefined","localeMatcher","mode","prefix","suffix","currency","currencyDisplay","useGrouping","minFractionDigits","maxFractionDigits","min","max","step","allowEmpty","readonly","disabled","placeholder","inputId","inputClass","inputStyle","inputProps","incrementButtonProps","decrementButtonProps","numberFormat","_numeral","_decimal","_group","_minusSign","_currency","_suffix","_prefix","_index","groupChar","isSpecialChar","prefixChar","suffixChar","timer","data","d_modelValue","focused","watch","newValue","oldValue","updateConstructParser","created","constructParser","methods","getOptions","style","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","numerals","reverse","index","Map","map","d","i","RegExp","join","getGroupingExpression","getMinusSignExpression","getCurrencyExpression","getDecimalExpression","getSuffixExpression","getPrefixExpression","get","escapeRegExp","text","replace","formatter","trim","charAt","split","formatValue","value","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","clearTimer","setTimeout","spin","$refs","input","currentValue","$el","validateValue","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyUp","onUpButtonKeyDown","keyCode","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","lastValue","onInputKeyDown","target","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","which","isNumeralChar","setAttribute","deleteChar","decimalCharIndex","decimalCharIndexWithoutPrefix","getDecimalCharIndexes","decimalLength","getDecimalLength","test","lastIndex","slice","setSelectionRange","insertedText","isDecimalMode","updateValue","deleteRange","onInputKeyPress","code","char","fromCharCode","isDecimalSign","isMinusSign","insert","onPaste","clipboardData","window","getData","filteredData","allowMinusSign","val","search","filteredVal","getCharIndexes","minusCharIndex","suffixCharIndex","currencyCharIndex","sign","minusCharIndexOnText","insertText","resolvedOptions","operation","length","charIndex","start","end","textSplit","initCursor","valueLength","prefixLength","onInputClick","resetRegex","valueStr","insertedValueStr","isValueChanged","$emit","originalEvent","parsedCurrentValue","currentLength","concatValues","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","val1","val2","valueSplit","onInputFocus","onInputBlur","clearInterval","maxBoundry","minBoundry","computed","containerClass","filled","upButtonClass","downButtonClass","upButtonListeners","mousedown","mouseup","mouseleave","keydown","keyup","downButtonListeners","getFormatter","components","_hoisted_1","key","class","render","_ctx","_cache","$props","$setup","$data","$options","_component_INInputText","_component_INButton","ref","role","id","ariaLabelledby","ariaLabel","onInput","onKeydown","onKeypress","onClick","onFocus","onBlur","icon","tabindex","styleInject","css","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","css_248z"],"sources":["D:/sakai-vue/node_modules/primevue/inputnumber/inputnumber.esm.js"],"sourcesContent":["import InputText from 'primevue/inputtext';\nimport Button from 'primevue/button';\nimport { resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, mergeProps, toHandlers, createCommentVNode, createBlock } from 'vue';\n\nvar script = {\n    name: 'InputNumber',\n    emits: ['update:modelValue', 'input', 'focus', 'blur'],\n    props: {\n        modelValue: {\n            type: Number,\n            default: null\n        },\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null,\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null,\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-up',\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-down',\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        inputId: null,\n        inputClass: null,\n        inputStyle: null,\n        inputProps: null,\n        incrementButtonProps: null,\n        decrementButtonProps: null,\n        'aria-labelledby': {\n            type: String,\n\t\t\tdefault: null\n        },\n        'aria-label': {\n            type: String,\n            default: null\n        }\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_modelValue: this.modelValue,\n            focused: false\n        }\n    },\n    watch: {\n        modelValue(newValue) {\n            this.d_modelValue = newValue;\n        },\n\t\tlocale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = d => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {...this.getOptions(), useGrouping: false});\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay,\n                    minimumFractionDigits: 0, maximumFractionDigits: 0});\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`,'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            }\n            else {\n                const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay});\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            }\n            else {\n                const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\n                    minimumFractionDigits: 0, maximumFractionDigits: 0});\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') { // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                                .replace(this._suffix, '')\n                                .replace(this._prefix, '')\n                                .trim()\n                                .replace(/\\s/g, '')\n                                .replace(this._currency, '')\n                                .replace(this._group, '')\n                                .replace(this._minusSign, '-')\n                                .replace(this._decimal, '.')\n                                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-') // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            this.lastValue = event.target.value;\n            if (event.shiftKey || event.altKey) {\n                this.isSpecialChar = true;\n                return;\n            }\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            if (event.altKey) {\n                event.preventDefault();\n            }\n\n            switch (event.which) {\n                //up\n                case 38:\n                    this.spin(event, 1);\n                    event.preventDefault();\n                break;\n\n                //down\n                case 40:\n                    this.spin(event, -1);\n                    event.preventDefault();\n                break;\n\n                //left\n                case 37:\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n                break;\n\n                //right\n                case 39:\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n                break;\n\n                //tab and enter\n                case 9:\n                case 13:\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                break;\n\n                //backspace\n                case 8: {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            }\n                            else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                }\n                                else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            }\n                            else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            }\n                            else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            }\n                            else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    }\n                    else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                // del\n                case 46:\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            }\n                            else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                }\n                                else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            }\n                            else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            }\n                            else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            }\n                            else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    }\n                    else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n                break;\n\n                //home\n                case 36:\n                    if (this.min) {\n                        this.updateModel(event, this.min);\n                        event.preventDefault();\n                    }\n                break;\n\n                //end\n                case 35:\n                    if (this.max) {\n                        this.updateModel(event, this.max);\n                        event.preventDefault();\n                    }\n                break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            event.preventDefault();\n            let code = event.which || event.keyCode;\n            let char = String.fromCharCode(code);\n            const isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n            if (data) {\n                let filteredData = this.parseValue(data);\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n            this._minusSign.lastIndex = 0;\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            }\n            else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                }\n                else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n                else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            }\n            else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : (suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length);\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                }\n                else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n                this._decimal.lastIndex = 0;\n                return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\n            }\n            else if ((end - start) === value.length) {\n                return this.formatValue(text);\n            }\n            else if (start === 0) {\n                return text + value.slice(end);\n            }\n            else if (end === value.length) {\n                return value.slice(0, start) + text;\n            }\n            else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if ((end - start) === value.length)\n                newValueStr = '';\n            else if (start === 0)\n                newValueStr = value.slice(end);\n            else if (end === value.length)\n                newValueStr = value.slice(0, start);\n            else\n                newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                }\n                else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            }\n            else {\n                i = selectionStart;\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            if (!this.readonly) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex =  0;\n            this._decimal.lastIndex =  0;\n            this._group.lastIndex =  0;\n            this._minusSign.lastIndex =  0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    else if (operation === 'delete-single')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    else if (operation === 'delete-range' || operation === 'spin')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    }\n                    else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += (-1 * diff) + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex !== -1 ? (val1.split(this._decimal)[0] + val2.slice(decimalCharIndex)) : val1;\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '')\n                                .trim()\n                                .replace(/\\s/g, '')\n                                .replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_modelValue = value;\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value});\n            \n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_modelValue >= this.max;\n        },\n        minBoundry() {\n            return this.d_modelValue <= this.min;\n        },\n    },\n    computed: {\n        containerClass() {\n            return ['p-inputnumber p-component p-inputwrapper', {\n                'p-inputwrapper-filled': this.filled,\n                'p-inputwrapper-focus': this.focused,\n                'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'\n            }];\n        },\n        \n        upButtonClass() {\n            return ['p-inputnumber-button p-inputnumber-button-up', this.incrementButtonClass, {\n                'p-disabled': this.showButtons && this.max !== null && this.maxBoundry()\n            }];\n        },\n        downButtonClass() {\n            return ['p-inputnumber-button p-inputnumber-button-down', this.decrementButtonClass, {\n                'p-disabled': this.showButtons && this.min !== null && this.minBoundry()\n            }];\n        },\n        filled() {\n            return (this.modelValue != null && this.modelValue.toString().length > 0)\n        },\n        upButtonListeners() {\n            return {\n                mousedown: event => this.onUpButtonMouseDown(event),\n                mouseup: event => this.onUpButtonMouseUp(event),\n                mouseleave: event => this.onUpButtonMouseLeave(event),\n                keydown: event => this.onUpButtonKeyDown(event),\n                keyup: event => this.onUpButtonKeyUp(event)\n            }\n        },\n        downButtonListeners() {\n            return {\n                mousedown: event => this.onDownButtonMouseDown(event),\n                mouseup: event => this.onDownButtonMouseUp(event),\n                mouseleave: event => this.onDownButtonMouseLeave(event),\n                keydown: event => this.onDownButtonKeyDown(event),\n                keyup: event => this.onDownButtonKeyUp(event)\n            }\n        },\n        formattedValue() {\n            const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        'INInputText': InputText,\n        'INButton': Button\n    }\n};\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"p-inputnumber-button-group\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_INInputText = resolveComponent(\"INInputText\");\n  const _component_INButton = resolveComponent(\"INButton\");\n\n  return (openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass($options.containerClass)\n  }, [\n    createVNode(_component_INInputText, mergeProps({\n      ref: \"input\",\n      class: [\"p-inputnumber-input\", $props.inputClass],\n      role: \"spinbutton\",\n      id: $props.inputId,\n      style: $props.inputStyle,\n      value: $options.formattedValue,\n      \"aria-valuemin\": $props.min,\n      \"aria-valuemax\": $props.max,\n      \"aria-valuenow\": $props.modelValue,\n      readonly: $props.readonly,\n      placeholder: $props.placeholder,\n      \"aria-labelledby\": _ctx.ariaLabelledby,\n      \"aria-label\": _ctx.ariaLabel,\n      onInput: $options.onUserInput,\n      onKeydown: $options.onInputKeyDown,\n      onKeypress: $options.onInputKeyPress,\n      onPaste: $options.onPaste,\n      onClick: $options.onInputClick,\n      onFocus: $options.onInputFocus,\n      onBlur: $options.onInputBlur\n    }, $props.inputProps), null, 16, [\"id\", \"class\", \"style\", \"value\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"readonly\", \"placeholder\", \"aria-labelledby\", \"aria-label\", \"onInput\", \"onKeydown\", \"onKeypress\", \"onPaste\", \"onClick\", \"onFocus\", \"onBlur\"]),\n    ($props.showButtons && $props.buttonLayout === 'stacked')\n      ? (openBlock(), createElementBlock(\"span\", _hoisted_1, [\n          createVNode(_component_INButton, mergeProps({\n            class: $options.upButtonClass,\n            icon: $props.incrementButtonIcon\n          }, toHandlers($options.upButtonListeners), {\n            disabled: $props.disabled,\n            tabindex: -1,\n            \"aria-hidden\": \"true\"\n          }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]),\n          createVNode(_component_INButton, mergeProps({\n            class: $options.downButtonClass,\n            icon: $props.decrementButtonIcon\n          }, toHandlers($options.downButtonListeners), {\n            disabled: $props.disabled,\n            tabindex: -1,\n            \"aria-hidden\": \"true\"\n          }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])\n        ]))\n      : createCommentVNode(\"\", true),\n    ($props.showButtons && $props.buttonLayout !== 'stacked')\n      ? (openBlock(), createBlock(_component_INButton, mergeProps({\n          key: 1,\n          class: $options.upButtonClass,\n          icon: $props.incrementButtonIcon\n        }, toHandlers($options.upButtonListeners), {\n          disabled: $props.disabled,\n          tabindex: -1,\n          \"aria-hidden\": \"true\"\n        }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]))\n      : createCommentVNode(\"\", true),\n    ($props.showButtons && $props.buttonLayout !== 'stacked')\n      ? (openBlock(), createBlock(_component_INButton, mergeProps({\n          key: 2,\n          class: $options.downButtonClass,\n          icon: $props.decrementButtonIcon\n        }, toHandlers($options.downButtonListeners), {\n          disabled: $props.disabled,\n          tabindex: -1,\n          \"aria-hidden\": \"true\"\n        }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]))\n      : createCommentVNode(\"\", true)\n  ], 2))\n}\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"\\n.p-inputnumber {\\n    display: -webkit-inline-box;\\n    display: -ms-inline-flexbox;\\n    display: inline-flex;\\n}\\n.p-inputnumber-button {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -webkit-box-flex: 0;\\n        -ms-flex: 0 0 auto;\\n            flex: 0 0 auto;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\\n    display: none;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-input {\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    border-bottom-left-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n        -ms-flex-direction: column;\\n            flex-direction: column;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1 1 auto;\\n            flex: 1 1 auto;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\\n    -webkit-box-ordinal-group: 4;\\n        -ms-flex-order: 3;\\n            order: 3;\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-inputnumber-input {\\n    -webkit-box-ordinal-group: 3;\\n        -ms-flex-order: 2;\\n            order: 2;\\n    border-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\\n    -webkit-box-ordinal-group: 2;\\n        -ms-flex-order: 1;\\n            order: 1;\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-vertical {\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n        -ms-flex-direction: column;\\n            flex-direction: column;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\\n    -webkit-box-ordinal-group: 2;\\n        -ms-flex-order: 1;\\n            order: 1;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    -webkit-box-ordinal-group: 3;\\n        -ms-flex-order: 2;\\n            order: 2;\\n    border-radius: 0;\\n    text-align: center;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\\n    -webkit-box-ordinal-group: 4;\\n        -ms-flex-order: 3;\\n            order: 3;\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-input {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1 1 auto;\\n            flex: 1 1 auto;\\n}\\n.p-fluid .p-inputnumber {\\n    width: 100%;\\n}\\n.p-fluid .p-inputnumber .p-inputnumber-input {\\n    width: 1%;\\n}\\n.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    width: 100%;\\n}\\n\";\nstyleInject(css_248z);\n\nscript.render = render;\n\nexport { script as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}