{"ast":null,"code":"import store from \"../store/index.js\";\nimport axios from 'axios';\nimport { GATEWAY_URL } from \"./configService\";\nimport EventBus from \"../commons/EventBus\"; // async function doGetRequest(url) {\n//     const options = {\n//         method: \"GET\",\n//         headers: {\n//             \"Content-Type\": 'application/json',\n//             \"Authorization\": store.state.auth.authorization,\n//         },\n//     }\n//     const response = await fetch(url, options)\n//         .catch(err => console.log(err))\n//     return response.json()\n// }\n//\n// async function doPostRequest(url, body) {\n//     const options = {\n//         method: \"POST\",\n//         headers: {\n//             \"Content-Type\": 'application/json',\n//             \"Authorization\": store.state.auth.authorization,\n//         },\n//         body: JSON.stringify(body)\n//     }\n//\n//     const response = await fetch(url, options)\n//         .catch(err => console.log(err))\n//     return response.json()\n// }\n\nconst LOGIN_URL = `${GATEWAY_URL}/auth/login`;\nconst REFRESH_TOKEN_URL = `${GATEWAY_URL}/auth/refreshToken`;\n\nfunction initialClient(hasFile) {\n  let axiosInstance = axios.create({\n    timeout: 60000,\n    responseType: 'json',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': hasFile ? 'multipart/form-data' : 'application/json'\n    }\n  });\n  axiosInstance.interceptors.request.use(config => {\n    const token = store.state.auth.authorization;\n\n    if (token) {\n      config.headers['Authorization'] = token;\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, err => {\n    const originalConfig = err.config;\n\n    if (originalConfig.url !== LOGIN_URL && err.response) {\n      // Access Token was expired\n      if (err.response.status === 403 && originalConfig.url === REFRESH_TOKEN_URL) {\n        EventBus.dispatch(\"logout\");\n        return Promise.reject(err);\n      }\n\n      if (err.response.status === 401 && !originalConfig._retry) {\n        console.log(\"retry: \", originalConfig._retry);\n        originalConfig._retry = true;\n\n        try {\n          console.log(store.state.auth.refreshToken);\n          axiosInstance.post(REFRESH_TOKEN_URL, {\n            refreshToken: store.state.auth.refreshToken\n          }).then(rs => store.dispatch('auth/refreshToken', rs.data));\n          return axiosInstance(originalConfig);\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n\n    return Promise.reject(err);\n  });\n  return axiosInstance;\n}\n\nconst request = async (method, path, data, hasFile) => {\n  console.log(`${method.toUpperCase()}: ${path}`, data);\n  return new Promise((resolve, reject) => {\n    data = data || {};\n    let request = {};\n    const client = initialClient(hasFile);\n\n    switch (method) {\n      case 'get':\n        request = client.get(path, data || {});\n        break;\n\n      case 'post':\n        request = client.post(path, data || {});\n        break;\n\n      case 'patch':\n        request = client.patch(path, data || {});\n        break;\n\n      case 'put':\n        request = client.put(path, data || {});\n        break;\n\n      case 'delete':\n        request = client.delete(path, data || {});\n        break;\n\n      default:\n        request = client.get(path, data || {});\n        break;\n    }\n\n    request.then(response => {\n      console.log(`RESPONSE: ${path}`, response.data);\n      resolve(response.data || {});\n    }).catch(err => {\n      reject(err.response);\n    });\n  });\n};\n\nconst post = async (path, data) => {\n  return await request(\"post\", path, data);\n};\n\nconst get = async (path, data) => {\n  return await request(\"get\", path, data);\n};\n\nconst put = async (path, data) => {\n  return await request(\"put\", path, data);\n};\n\nconst del = async (path, data) => {\n  return await request(\"delete\", path, data);\n};\n\nconst postWithFile = async (path, data) => {\n  return await request(\"post\", path, data, true);\n};\n\nexport default {\n  request,\n  post,\n  get,\n  put,\n  del,\n  postWithFile\n};","map":{"version":3,"names":["store","axios","GATEWAY_URL","EventBus","LOGIN_URL","REFRESH_TOKEN_URL","initialClient","hasFile","axiosInstance","create","timeout","responseType","headers","interceptors","request","use","config","token","state","auth","authorization","error","Promise","reject","response","res","err","originalConfig","url","status","dispatch","_retry","console","log","refreshToken","post","then","rs","data","_error","method","path","toUpperCase","resolve","client","get","patch","put","delete","catch","del","postWithFile"],"sources":["D:/0. TaiPT/2.Vue JS/sakai-vue/src/api/baseApi.js"],"sourcesContent":["import store from \"../store/index.js\";\r\nimport axios from 'axios';\r\nimport {GATEWAY_URL} from \"./configService\";\r\nimport EventBus from \"../commons/EventBus\";\r\n\r\n// async function doGetRequest(url) {\r\n//     const options = {\r\n//         method: \"GET\",\r\n//         headers: {\r\n//             \"Content-Type\": 'application/json',\r\n//             \"Authorization\": store.state.auth.authorization,\r\n//         },\r\n//     }\r\n//     const response = await fetch(url, options)\r\n//         .catch(err => console.log(err))\r\n//     return response.json()\r\n// }\r\n//\r\n// async function doPostRequest(url, body) {\r\n//     const options = {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             \"Content-Type\": 'application/json',\r\n//             \"Authorization\": store.state.auth.authorization,\r\n//         },\r\n//         body: JSON.stringify(body)\r\n//     }\r\n//\r\n//     const response = await fetch(url, options)\r\n//         .catch(err => console.log(err))\r\n//     return response.json()\r\n// }\r\n\r\nconst LOGIN_URL = `${GATEWAY_URL}/auth/login`;\r\nconst REFRESH_TOKEN_URL = `${GATEWAY_URL}/auth/refreshToken`;\r\n\r\nfunction initialClient(hasFile) {\r\n    let axiosInstance = axios.create({\r\n        timeout: 60000,\r\n        responseType: 'json',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': hasFile ? 'multipart/form-data' : 'application/json',\r\n        },\r\n    });\r\n    axiosInstance.interceptors.request.use(\r\n        (config) => {\r\n            const token = store.state.auth.authorization;\r\n            if (token) {\r\n                config.headers['Authorization'] = token;\r\n            }\r\n            return config;\r\n        },\r\n        (error) => {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n    axiosInstance.interceptors.response.use(\r\n        (res) => {\r\n            return res;\r\n        },\r\n        (err) => {\r\n            const originalConfig = err.config;\r\n\r\n            if (originalConfig.url !== LOGIN_URL && err.response) {\r\n                // Access Token was expired\r\n                if (err.response.status === 403 && originalConfig.url === REFRESH_TOKEN_URL) {\r\n                    EventBus.dispatch(\"logout\");\r\n                    return Promise.reject(err);\r\n                }\r\n                if (err.response.status === 401 && !originalConfig._retry) {\r\n                    console.log(\"retry: \", originalConfig._retry);\r\n                    originalConfig._retry = true;\r\n                    try {\r\n                        console.log(store.state.auth.refreshToken);\r\n                        axiosInstance.post(REFRESH_TOKEN_URL, {\r\n                            refreshToken: store.state.auth.refreshToken,\r\n                        }).then(\r\n                            (rs) => store.dispatch('auth/refreshToken', rs.data)\r\n                        );\r\n                        return axiosInstance(originalConfig);\r\n                    } catch (_error) {\r\n                        return Promise.reject(_error);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return Promise.reject(err);\r\n        }\r\n    );\r\n    return axiosInstance;\r\n}\r\n\r\nconst request = async (method, path, data, hasFile) => {\r\n    console.log(`${method.toUpperCase()}: ${path}`, data);\r\n    return new Promise((resolve, reject) => {\r\n        data = data || {};\r\n        let request = {};\r\n        const client = initialClient(hasFile);\r\n        switch (method) {\r\n            case 'get':\r\n                request = client.get(path, data || {});\r\n                break;\r\n            case 'post':\r\n                request = client.post(path, data || {});\r\n                break;\r\n            case 'patch':\r\n                request = client.patch(path, data || {});\r\n                break;\r\n            case 'put':\r\n                request = client.put(path, data || {});\r\n                break;\r\n            case 'delete':\r\n                request = client.delete(path, data || {});\r\n                break;\r\n            default:\r\n                request = client.get(path, data || {});\r\n                break;\r\n        }\r\n        request.then(response => {\r\n            console.log(`RESPONSE: ${path}`, response.data);\r\n            resolve(response.data || {});\r\n        }).catch(err => {\r\n            reject(err.response);\r\n        });\r\n    });\r\n};\r\n\r\nconst post = async (path, data) => {\r\n    return await request(\"post\", path, data);\r\n};\r\n\r\nconst get = async (path, data) => {\r\n    return await request(\"get\", path, data);\r\n};\r\n\r\nconst put = async (path, data) => {\r\n    return await request(\"put\", path, data);\r\n};\r\n\r\nconst del = async (path, data) => {\r\n    return await request(\"delete\", path, data);\r\n};\r\n\r\nconst postWithFile = async (path, data) => {\r\n    return await request(\"post\", path, data, true);\r\n};\r\n\r\n\r\nexport default {\r\n    request,\r\n    post, get, put, del,\r\n    postWithFile\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}